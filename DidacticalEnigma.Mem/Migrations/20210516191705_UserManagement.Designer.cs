// <auto-generated />
using System;
using DidacticalEnigma.Mem;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using NpgsqlTypes;

namespace DidacticalEnigma.Mem.Migrations
{
    [DbContext(typeof(MemContext))]
    [Migration("20210516191705_UserManagement")]
    partial class UserManagement
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("DidacticalEnigma.Mem.Translation.StoredModels.AllowedMediaType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("MediaType")
                        .IsRequired()
                        .HasColumnType("character varying(64)")
                        .HasMaxLength(64);

                    b.HasKey("Id");

                    b.HasIndex("MediaType")
                        .IsUnique();

                    b.ToTable("MediaTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            MediaType = "image/jpeg"
                        },
                        new
                        {
                            Id = 2,
                            MediaType = "image/png"
                        });
                });

            modelBuilder.Entity("DidacticalEnigma.Mem.Translation.StoredModels.Context", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uuid");

                    b.Property<byte[]>("Content")
                        .HasColumnType("bytea");

                    b.Property<int?>("MediaTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("Text")
                        .HasColumnType("character varying(512)")
                        .HasMaxLength(512);

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("MediaTypeId");

                    b.ToTable("Contexts");
                });

            modelBuilder.Entity("DidacticalEnigma.Mem.Translation.StoredModels.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("CanAddContexts")
                        .HasColumnType("boolean");

                    b.Property<bool>("CanAddProjects")
                        .HasColumnType("boolean");

                    b.Property<bool>("CanDeleteContexts")
                        .HasColumnType("boolean");

                    b.Property<bool>("CanDeleteProjects")
                        .HasColumnType("boolean");

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasAlternateKey("GroupName");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("DidacticalEnigma.Mem.Translation.StoredModels.GroupProjectClaim", b =>
                {
                    b.Property<int>("GroupId")
                        .HasColumnType("integer");

                    b.Property<int>("ProjectId")
                        .HasColumnType("integer");

                    b.Property<bool>("CanAddTranslations")
                        .HasColumnType("boolean");

                    b.Property<bool>("CanDeleteTranslations")
                        .HasColumnType("boolean");

                    b.Property<bool>("CanReadTranslations")
                        .HasColumnType("boolean");

                    b.HasKey("GroupId", "ProjectId");

                    b.HasIndex("ProjectId");

                    b.ToTable("GroupProjectClaims");
                });

            modelBuilder.Entity("DidacticalEnigma.Mem.Translation.StoredModels.NpgsqlQuery", b =>
                {
                    b.Property<NpgsqlTsVector>("Vec")
                        .IsRequired()
                        .HasColumnType("tsvector");

                    b.ToTable("NpgsqlQueries");
                });

            modelBuilder.Entity("DidacticalEnigma.Mem.Translation.StoredModels.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("DidacticalEnigma.Mem.Translation.StoredModels.Translation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ContextId")
                        .HasColumnType("uuid");

                    b.Property<string>("CorrelationId")
                        .IsRequired()
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<int>("ParentId")
                        .HasColumnType("integer");

                    b.Property<NpgsqlTsVector>("SearchVector")
                        .IsRequired()
                        .HasColumnType("tsvector")
                        .HasMaxLength(8192);

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasColumnType("character varying(4096)")
                        .HasMaxLength(4096);

                    b.Property<string>("Target")
                        .HasColumnType("character varying(4096)")
                        .HasMaxLength(4096);

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("ContextId");

                    b.HasIndex("CorrelationId");

                    b.HasIndex("ParentId", "CorrelationId")
                        .IsUnique();

                    b.ToTable("TranslationPairs");
                });

            modelBuilder.Entity("DidacticalEnigma.Mem.Translation.StoredModels.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsSpecialUser")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying(32)")
                        .HasMaxLength(32);

                    b.HasKey("Id");

                    b.HasAlternateKey("Name");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("32674391-9e28-422b-9dd7-3edefadb3417"),
                            IsSpecialUser = true,
                            Name = "<anonymous user>"
                        },
                        new
                        {
                            Id = new Guid("b97335bd-6670-414f-b7e7-c7be511b4a6c"),
                            IsSpecialUser = true,
                            Name = "<administrator>"
                        });
                });

            modelBuilder.Entity("DidacticalEnigma.Mem.Translation.StoredModels.UserGroupMembership", b =>
                {
                    b.Property<int>("GroupId")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("GroupId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserGroupMemberships");
                });

            modelBuilder.Entity("DidacticalEnigma.Mem.Translation.StoredModels.Context", b =>
                {
                    b.HasOne("DidacticalEnigma.Mem.Translation.StoredModels.User", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DidacticalEnigma.Mem.Translation.StoredModels.AllowedMediaType", "MediaType")
                        .WithMany()
                        .HasForeignKey("MediaTypeId");
                });

            modelBuilder.Entity("DidacticalEnigma.Mem.Translation.StoredModels.GroupProjectClaim", b =>
                {
                    b.HasOne("DidacticalEnigma.Mem.Translation.StoredModels.Group", "Group")
                        .WithMany("ProjectClaims")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DidacticalEnigma.Mem.Translation.StoredModels.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DidacticalEnigma.Mem.Translation.StoredModels.Translation", b =>
                {
                    b.HasOne("DidacticalEnigma.Mem.Translation.StoredModels.User", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DidacticalEnigma.Mem.Translation.StoredModels.Context", "Context")
                        .WithMany()
                        .HasForeignKey("ContextId");

                    b.HasOne("DidacticalEnigma.Mem.Translation.StoredModels.Project", "Parent")
                        .WithMany("Translations")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DidacticalEnigma.Mem.Translation.StoredModels.UserGroupMembership", b =>
                {
                    b.HasOne("DidacticalEnigma.Mem.Translation.StoredModels.Group", "Group")
                        .WithMany("Users")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DidacticalEnigma.Mem.Translation.StoredModels.User", "User")
                        .WithMany("Groups")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
